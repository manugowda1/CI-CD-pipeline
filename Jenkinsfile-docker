pipeline {
    agent any
    environment {
        registryCredential = 'ecr:eu-west-1:awslogin'
        appRegistry = "367800374360.dkr.ecr.eu-west-1.amazonaws.com/appimg"
        vprofileRegistry = "https://367800374360.dkr.ecr.eu-west-1.amazonaws.com"
    }

    stages {
        stage('Fetch code') {
            steps {
               git branch: 'docker', url: 'https://github.com/manugowda1/CI-CD-pipeline.git'
            }
        }

        stage('Test'){
            steps {
               sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis'){
            steps {
               sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
               }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build App Image') {
           steps {

             script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Dockerfiles/multistage/")
                  }

           }

        }

        stage('Upload App Image') {
              steps{
                script {
                  docker.withRegistry( vprofileRegistry, registryCredential ) {
                    dockerImage.push("$BUILD_NUMBER")
                    dockerImage.push('latest')
                  }
                }
              }
        }
    }
}